<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">
<article>
  <title>RAGE::SDL : The SDL Utility Toolkit</title>

  <section>
    <title>Features</title>

    <para>This library is mostly a C++ portable layer over the <ulink
    url="http://www.libsdl.org">Smart DirectMedia Library</ulink>. The aim is
    to have a Object Oriented interface to SDL to be used for simple
    applications, working a bit like GLUT work for OpenGL. Just defining few
    functions, and off you go ! but still be able to use a stable
    object-oriented framework around the SDL libraries.</para>

    <para>Users should be able to use it easily and have at least a "default
    consistent behaviour" while logging acurately what happening inside if
    needed, while advanced user can redefine and tune every bits of behaviour
    of the library.</para>

    <para>Along with SDL others libraries will be added as optional, on build
    time or with dynamic binding. These are SDL_image, SDL_ttf, SDL_sound,
    SDL_image and SDL_Net.</para>

    <section>
      <title>Graphic Interface</title>

      <para>The graphic interface consist of a pure virtual class called
      "Engine". You need to derivate it with you own if you want to be able to
      display something in your SDL window. You can use either OpenGL
      functions or RAGE::SDL 2D functions, providing you created the Window
      with the correct settings.</para>

      <para>If you dont provide you own, a default Engine will be used.</para>
    </section>

    <section>
      <title>Input Interface</title>

      <para>The input interface is made by EventManager, Joystick, Keyboard,
      Mouse. You will probably need to extend them to implement the behaviour
      you want.</para>
    </section>

    <section>
      <title>Audio Interface</title>

      <para>None yet.</para>
    </section>

    <section>
      <title>Video Interface</title>

      <para>The video Interface is made by RGBSurface, VideoSurface and
      GLSurface mostly.</para>
    </section>

    <section>
      <title>Text Interface</title>

      <para>The Text interface is provided by the Font class that enables you
      to render text in an RGBSurface.</para>
    </section>

    <section>
      <title>OS Functions</title>

      <para>None yet</para>

      <section>
        <title>Timer</title>

        <para>A Timer class with some usefull functions.</para>
      </section>

      <section>
        <title>Threads</title>

        <para>None yet</para>
      </section>

      <section>
        <title>RWOps</title>

        <para>A RWOps classwith some functions.</para>
      </section>
    </section>

    <section>
      <title>Common Core Components</title>

      <para>This is a list of usefull features added only for the need of this
      C++ wrapper. But still they might be usefull somewhere else, and are not
      really related to the main subject fo the Utility Toolkit</para>

      <section>
        <title>Logger</title>

        <para>The Logger class is the only feature that was needed so
        far.</para>
      </section>
    </section>
  </section>

  <section>
    <title>Dependencies</title>

    <para>- <ulink url="http://www.libsdl.org">SDL</ulink>
    <emphasis>mandatory.</emphasis></para>

    <para>optional :</para>

    <para>- SDL_image : provide more image file format to the library.</para>

    <para>- SDL_mixer : provide more possibility using sounds with the
    library.</para>

    <para>- SDL_net : provide Network features to the library.</para>

    <para>- SDL_ttf : provide support for loading and using Font files.</para>

    <para>- SDL_sound : provide more sound file format to the library.</para>

    <para></para>
  </section>

  <section>
    <title>How to build, test and install</title>

    <para></para>

    <section>
      <title>Getting all needed Dependencies</title>

      <para>The only mandatory dependency is SDL. All the other ones are
      optional.</para>

      <para></para>

      <para>On Linux / Unix systems, there are usually a package system that
      enables you to download those dependencies. Just use it. It will install
      the files in the standard places and the CMake build should detect them
      automatically.</para>

      <para></para>

      <para>On Windows, you will have to do it manually. Get the dependencies
      from the web.</para>

      <para>Then define specific environment variables (CMake 2.2):</para>

      <para>For SDL : SDLDIR must contain the directory where you installed
      SDL,</para>

      <para>For SDL_image : SDLIMAGEDIR must contain the directory where you
      installed SDL_image.</para>

      <para>For SDL_mixer : SDLMIXERDIR must contain the directory where you
      installed SDL_mixer.</para>

      <para>For SDL_net : SDLNETDIR must contain the directory where you
      installed SDL_net.</para>

      <para>For SDL_ttf : SDLTTFDIR must contain the directory where you
      installed SDL_ttf.</para>

      <para>For SDL_sound : SDLSOUNDDIR must contain the directory where you
      installed SDL_sound.</para>

      <para>With Cmake &gt;= 2.4 you will only need to define few variables
      :</para>

      <para></para>

      <para></para>

      <para>CMake should now detect your librairies. If it doesnt you will
      have to pass the value manually.</para>

      <para>To be able to run your executable you need to have the directory
      containing the .dll in your PATH.</para>

      <para></para>
    </section>

    <section>
      <title>Code::Blocks build</title>

      <para>Code::Blocks build are not actually used anymore. Most of them are
      using the CMake buildchain. They will be removed as soon as the CMake
      buildchain is available for every project.</para>
    </section>

    <section>
      <title>CMake build</title>

      <para>The CMake build generates files for most of the compilers / build
      systems.</para>

      <para>The good thing with CMake is that it will check the dependencies
      available on your system and help you to configure your system for
      development, and it works natively on windows, no emulation layer
      needed, which result in smaller built files.</para>

      <para>It also relies on traditional GNUmake on Unix which is definitely
      a good thing, even if we havnt tested it on Unix yet.</para>

      <para></para>

      <para><emphasis role="bold">Setting up the build environment to work
      with CMake :</emphasis></para>

      <para>- <emphasis role="bold">Windows</emphasis> : I advise MS Visual
      Express 8 2005, as it is free, just need to register. You might need to
      install the platform SDK and make sure the directories are correctly
      setup, cf. Microsoft Website</para>

      <para>If something goes wrong (cmake doesnt detect your cl.exe properly)
      try <literal>cmake --debug-trycompile</literal> it will output a
      VSProject that you can try to open and build with VStudio, and find out
      what happens...</para>

      <para>temporary note : with cmake 2.2.3, you might need to install SQL
      to have the minimum required library to build the test project. This
      should be fixed in 2.2.4.</para>

      <para>- <emphasis role="bold">Unix/Linux</emphasis> : You just need to
      have GNUmake installed which is pretty standard (or really easy to get)
      on every Unix/Linux I am aware of ^^. Then install CMake with you
      package system.</para>

      <para></para>
    </section>

    <section>
      <title>Testing RAGE::SDL</title>

      <para>There are a few test that are usefull to test the C++ wrapper.
      most of them are still the old SDL tests, not yet using the wrapper...
      lots of work to do here.</para>
    </section>

    <section>
      <title>Installing RAGE::SDL</title>

      <para>RAGE::SDL will be built as a dynamic library or a static library.
      Right now only the static library is built.</para>
    </section>

    <section>
      <title>Using RAGE::SDL</title>

      <para>The online generated doc is available <ulink
      url="doxygen/html">here</ulink>, thanks to <ulink
      url="http://www.doxygen.org">Doxygen</ulink>.</para>
    </section>
  </section>

  <section>
    <title>Source overview : UML Diagrams</title>

    <para></para>

    <section>
      <title>Overview</title>

      <para></para>
    </section>

    <section>
      <title>Detailed</title>

      <para></para>
    </section>
  </section>
</article>